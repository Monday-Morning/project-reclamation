name: Staging CI/CD

on:
  push:
    branches: [main]
    paths:
      - "server/**"

permissions:
  actions: read
  checks: read
  contents: read
  deployments: write
  issues: write
  discussions: write
  packages: write
  pull-requests: write
  repository-projects: read
  security-events: read
  statuses: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    name: Prepare Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"
          cache: "yarn"
          cache-dependency-path: "**/yarn.lock"

      - name: Use Actions Cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-dev-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install && cd server && yarn install

      - name: Zip Artifact
        run: zip repo.zip ./* -r

      - name: Store Prepared Repository
        uses: actions/upload-artifact@v2
        with:
          name: prep-repo
          path: repo.zip
          retention-days: 1

  eslint:
    name: ESLint Check
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve Prepared Repository
        uses: actions/download-artifact@v2
        with:
          name: prep-repo

      - name: Unzip Artifact
        run: unzip repo.zip

      - name: Run ESLint
        uses: reviewdog/action-eslint@v1
        with:
          reporter: github-pr-review
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_error: true
          workdir: ./server

  prettier:
    name: Prettier Check
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve Prepared Repository
        uses: actions/download-artifact@v2
        with:
          name: prep-repo

      - name: Unzip Artifact
        run: unzip repo.zip

      - name: Prettify code
        uses: creyD/prettier_action@v4.0
        with:
          prettier_options: -c ./.prettierrc.yml --check
          file_pattern: ./server/.
          dry: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  mocha:
    name: Unit Tests
    needs: [eslint, prettier]
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve Prepared Repository
        uses: actions/download-artifact@v2
        with:
          name: prep-repo

      - name: Unzip Artifact
        run: unzip repo.zip

      - name: Run Mocha
        id: mocha_run
        run: yarn test

  docker-build:
    name: Build and publish Docker Container
    needs: mocha
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
          
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Add Env Config
        run: echo "$STAGE_ENV" > .env.staging
        env:
          STAGE_ENV: ${{ secrets.STAGE_ENV }}

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}
